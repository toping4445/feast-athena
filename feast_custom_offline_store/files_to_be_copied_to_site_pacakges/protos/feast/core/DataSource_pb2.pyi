"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from feast.core.DataFormat_pb2 import (
    FileFormat as feast___core___DataFormat_pb2___FileFormat,
    StreamFormat as feast___core___DataFormat_pb2___StreamFormat,
)

from feast.core.Feature_pb2 import (
    FeatureSpecV2 as feast___core___Feature_pb2___FeatureSpecV2,
)

from feast.types.Value_pb2 import (
    ValueType as feast___types___Value_pb2___ValueType,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
    ScalarMap as google___protobuf___internal___containers___ScalarMap,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    Mapping as typing___Mapping,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class DataSource(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    SourceTypeValue = typing___NewType('SourceTypeValue', builtin___int)
    type___SourceTypeValue = SourceTypeValue
    SourceType: _SourceType
    class _SourceType(google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[DataSource.SourceTypeValue]):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        INVALID = typing___cast(DataSource.SourceTypeValue, 0)
        BATCH_FILE = typing___cast(DataSource.SourceTypeValue, 1)
        BATCH_SNOWFLAKE = typing___cast(DataSource.SourceTypeValue, 8)
        BATCH_BIGQUERY = typing___cast(DataSource.SourceTypeValue, 2)
        BATCH_REDSHIFT = typing___cast(DataSource.SourceTypeValue, 5)
        STREAM_KAFKA = typing___cast(DataSource.SourceTypeValue, 3)
        STREAM_KINESIS = typing___cast(DataSource.SourceTypeValue, 4)
        CUSTOM_SOURCE = typing___cast(DataSource.SourceTypeValue, 6)
        REQUEST_SOURCE = typing___cast(DataSource.SourceTypeValue, 7)
        PUSH_SOURCE = typing___cast(DataSource.SourceTypeValue, 9)
        BATCH_TRINO = typing___cast(DataSource.SourceTypeValue, 10)
        BATCH_SPARK = typing___cast(DataSource.SourceTypeValue, 11)
        BATCH_ATHENA = typing___cast(DataSource.SourceTypeValue, 12)
    INVALID = typing___cast(DataSource.SourceTypeValue, 0)
    BATCH_FILE = typing___cast(DataSource.SourceTypeValue, 1)
    BATCH_SNOWFLAKE = typing___cast(DataSource.SourceTypeValue, 8)
    BATCH_BIGQUERY = typing___cast(DataSource.SourceTypeValue, 2)
    BATCH_REDSHIFT = typing___cast(DataSource.SourceTypeValue, 5)
    STREAM_KAFKA = typing___cast(DataSource.SourceTypeValue, 3)
    STREAM_KINESIS = typing___cast(DataSource.SourceTypeValue, 4)
    CUSTOM_SOURCE = typing___cast(DataSource.SourceTypeValue, 6)
    REQUEST_SOURCE = typing___cast(DataSource.SourceTypeValue, 7)
    PUSH_SOURCE = typing___cast(DataSource.SourceTypeValue, 9)
    BATCH_TRINO = typing___cast(DataSource.SourceTypeValue, 10)
    BATCH_SPARK = typing___cast(DataSource.SourceTypeValue, 11)
    BATCH_ATHENA = typing___cast(DataSource.SourceTypeValue, 12)

    class TagsEntry(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        key: typing___Text = ...
        value: typing___Text = ...

        def __init__(self,
            *,
            key : typing___Optional[typing___Text] = None,
            value : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...
    type___TagsEntry = TagsEntry

    class FieldMappingEntry(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        key: typing___Text = ...
        value: typing___Text = ...

        def __init__(self,
            *,
            key : typing___Optional[typing___Text] = None,
            value : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...
    type___FieldMappingEntry = FieldMappingEntry

    class FileOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        uri: typing___Text = ...
        s3_endpoint_override: typing___Text = ...

        @property
        def file_format(self) -> feast___core___DataFormat_pb2___FileFormat: ...

        def __init__(self,
            *,
            file_format : typing___Optional[feast___core___DataFormat_pb2___FileFormat] = None,
            uri : typing___Optional[typing___Text] = None,
            s3_endpoint_override : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"file_format",b"file_format"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"file_format",b"file_format",u"s3_endpoint_override",b"s3_endpoint_override",u"uri",b"uri"]) -> None: ...
    type___FileOptions = FileOptions

    class BigQueryOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        table: typing___Text = ...
        query: typing___Text = ...

        def __init__(self,
            *,
            table : typing___Optional[typing___Text] = None,
            query : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"query",b"query",u"table",b"table"]) -> None: ...
    type___BigQueryOptions = BigQueryOptions

    class TrinoOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        table: typing___Text = ...
        query: typing___Text = ...

        def __init__(self,
            *,
            table : typing___Optional[typing___Text] = None,
            query : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"query",b"query",u"table",b"table"]) -> None: ...
    type___TrinoOptions = TrinoOptions

    class KafkaOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        bootstrap_servers: typing___Text = ...
        topic: typing___Text = ...

        @property
        def message_format(self) -> feast___core___DataFormat_pb2___StreamFormat: ...

        def __init__(self,
            *,
            bootstrap_servers : typing___Optional[typing___Text] = None,
            topic : typing___Optional[typing___Text] = None,
            message_format : typing___Optional[feast___core___DataFormat_pb2___StreamFormat] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"message_format",b"message_format"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"bootstrap_servers",b"bootstrap_servers",u"message_format",b"message_format",u"topic",b"topic"]) -> None: ...
    type___KafkaOptions = KafkaOptions

    class KinesisOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        region: typing___Text = ...
        stream_name: typing___Text = ...

        @property
        def record_format(self) -> feast___core___DataFormat_pb2___StreamFormat: ...

        def __init__(self,
            *,
            region : typing___Optional[typing___Text] = None,
            stream_name : typing___Optional[typing___Text] = None,
            record_format : typing___Optional[feast___core___DataFormat_pb2___StreamFormat] = None,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions___Literal[u"record_format",b"record_format"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"record_format",b"record_format",u"region",b"region",u"stream_name",b"stream_name"]) -> None: ...
    type___KinesisOptions = KinesisOptions

    class RedshiftOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        table: typing___Text = ...
        query: typing___Text = ...
        schema: typing___Text = ...
        database: typing___Text = ...

        def __init__(self,
            *,
            table : typing___Optional[typing___Text] = None,
            query : typing___Optional[typing___Text] = None,
            schema : typing___Optional[typing___Text] = None,
            database : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"database",b"database",u"query",b"query",u"schema",b"schema",u"table",b"table"]) -> None: ...
    type___RedshiftOptions = RedshiftOptions

    class AthenaOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        table: typing___Text = ...
        query: typing___Text = ...
        database: typing___Text = ...
        data_source: typing___Text = ...

        def __init__(self,
            *,
            table : typing___Optional[typing___Text] = None,
            query : typing___Optional[typing___Text] = None,
            database : typing___Optional[typing___Text] = None,
            data_source : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"data_source",b"data_source",u"database",b"database",u"query",b"query",u"table",b"table"]) -> None: ...
    type___AthenaOptions = AthenaOptions

    class SnowflakeOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        table: typing___Text = ...
        query: typing___Text = ...
        schema: typing___Text = ...
        database: typing___Text = ...
        warehouse: typing___Text = ...

        def __init__(self,
            *,
            table : typing___Optional[typing___Text] = None,
            query : typing___Optional[typing___Text] = None,
            schema : typing___Optional[typing___Text] = None,
            database : typing___Optional[typing___Text] = None,
            warehouse : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"database",b"database",u"query",b"query",u"schema",b"schema",u"table",b"table",u"warehouse",b"warehouse"]) -> None: ...
    type___SnowflakeOptions = SnowflakeOptions

    class SparkOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        table: typing___Text = ...
        query: typing___Text = ...
        path: typing___Text = ...
        file_format: typing___Text = ...

        def __init__(self,
            *,
            table : typing___Optional[typing___Text] = None,
            query : typing___Optional[typing___Text] = None,
            path : typing___Optional[typing___Text] = None,
            file_format : typing___Optional[typing___Text] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"file_format",b"file_format",u"path",b"path",u"query",b"query",u"table",b"table"]) -> None: ...
    type___SparkOptions = SparkOptions

    class CustomSourceOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        configuration: builtin___bytes = ...

        def __init__(self,
            *,
            configuration : typing___Optional[builtin___bytes] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"configuration",b"configuration"]) -> None: ...
    type___CustomSourceOptions = CustomSourceOptions

    class RequestDataOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class DeprecatedSchemaEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key: typing___Text = ...
            value: feast___types___Value_pb2___ValueType.EnumValue = ...

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[feast___types___Value_pb2___ValueType.EnumValue] = None,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...
        type___DeprecatedSchemaEntry = DeprecatedSchemaEntry


        @property
        def deprecated_schema(self) -> google___protobuf___internal___containers___ScalarMap[typing___Text, feast___types___Value_pb2___ValueType.EnumValue]: ...

        @property
        def schema(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[feast___core___Feature_pb2___FeatureSpecV2]: ...

        def __init__(self,
            *,
            deprecated_schema : typing___Optional[typing___Mapping[typing___Text, feast___types___Value_pb2___ValueType.EnumValue]] = None,
            schema : typing___Optional[typing___Iterable[feast___core___Feature_pb2___FeatureSpecV2]] = None,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"deprecated_schema",b"deprecated_schema",u"schema",b"schema"]) -> None: ...
    type___RequestDataOptions = RequestDataOptions

    class PushOptions(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        def __init__(self,
            ) -> None: ...
    type___PushOptions = PushOptions

    name: typing___Text = ...
    project: typing___Text = ...
    description: typing___Text = ...
    owner: typing___Text = ...
    type: type___DataSource.SourceTypeValue = ...
    timestamp_field: typing___Text = ...
    date_partition_column: typing___Text = ...
    created_timestamp_column: typing___Text = ...
    data_source_class_type: typing___Text = ...

    @property
    def tags(self) -> google___protobuf___internal___containers___ScalarMap[typing___Text, typing___Text]: ...

    @property
    def field_mapping(self) -> google___protobuf___internal___containers___ScalarMap[typing___Text, typing___Text]: ...

    @property
    def batch_source(self) -> type___DataSource: ...

    @property
    def file_options(self) -> type___DataSource.FileOptions: ...

    @property
    def bigquery_options(self) -> type___DataSource.BigQueryOptions: ...

    @property
    def kafka_options(self) -> type___DataSource.KafkaOptions: ...

    @property
    def kinesis_options(self) -> type___DataSource.KinesisOptions: ...

    @property
    def redshift_options(self) -> type___DataSource.RedshiftOptions: ...

    @property
    def request_data_options(self) -> type___DataSource.RequestDataOptions: ...

    @property
    def custom_options(self) -> type___DataSource.CustomSourceOptions: ...

    @property
    def snowflake_options(self) -> type___DataSource.SnowflakeOptions: ...

    @property
    def push_options(self) -> type___DataSource.PushOptions: ...

    @property
    def spark_options(self) -> type___DataSource.SparkOptions: ...

    @property
    def trino_options(self) -> type___DataSource.TrinoOptions: ...

    @property
    def athena_options(self) -> type___DataSource.AthenaOptions: ...

    def __init__(self,
        *,
        name : typing___Optional[typing___Text] = None,
        project : typing___Optional[typing___Text] = None,
        description : typing___Optional[typing___Text] = None,
        tags : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
        owner : typing___Optional[typing___Text] = None,
        type : typing___Optional[type___DataSource.SourceTypeValue] = None,
        field_mapping : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
        timestamp_field : typing___Optional[typing___Text] = None,
        date_partition_column : typing___Optional[typing___Text] = None,
        created_timestamp_column : typing___Optional[typing___Text] = None,
        data_source_class_type : typing___Optional[typing___Text] = None,
        batch_source : typing___Optional[type___DataSource] = None,
        file_options : typing___Optional[type___DataSource.FileOptions] = None,
        bigquery_options : typing___Optional[type___DataSource.BigQueryOptions] = None,
        kafka_options : typing___Optional[type___DataSource.KafkaOptions] = None,
        kinesis_options : typing___Optional[type___DataSource.KinesisOptions] = None,
        redshift_options : typing___Optional[type___DataSource.RedshiftOptions] = None,
        request_data_options : typing___Optional[type___DataSource.RequestDataOptions] = None,
        custom_options : typing___Optional[type___DataSource.CustomSourceOptions] = None,
        snowflake_options : typing___Optional[type___DataSource.SnowflakeOptions] = None,
        push_options : typing___Optional[type___DataSource.PushOptions] = None,
        spark_options : typing___Optional[type___DataSource.SparkOptions] = None,
        trino_options : typing___Optional[type___DataSource.TrinoOptions] = None,
        athena_options : typing___Optional[type___DataSource.AthenaOptions] = None,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions___Literal[u"athena_options",b"athena_options",u"batch_source",b"batch_source",u"bigquery_options",b"bigquery_options",u"custom_options",b"custom_options",u"file_options",b"file_options",u"kafka_options",b"kafka_options",u"kinesis_options",b"kinesis_options",u"options",b"options",u"push_options",b"push_options",u"redshift_options",b"redshift_options",u"request_data_options",b"request_data_options",u"snowflake_options",b"snowflake_options",u"spark_options",b"spark_options",u"trino_options",b"trino_options"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"athena_options",b"athena_options",u"batch_source",b"batch_source",u"bigquery_options",b"bigquery_options",u"created_timestamp_column",b"created_timestamp_column",u"custom_options",b"custom_options",u"data_source_class_type",b"data_source_class_type",u"date_partition_column",b"date_partition_column",u"description",b"description",u"field_mapping",b"field_mapping",u"file_options",b"file_options",u"kafka_options",b"kafka_options",u"kinesis_options",b"kinesis_options",u"name",b"name",u"options",b"options",u"owner",b"owner",u"project",b"project",u"push_options",b"push_options",u"redshift_options",b"redshift_options",u"request_data_options",b"request_data_options",u"snowflake_options",b"snowflake_options",u"spark_options",b"spark_options",u"tags",b"tags",u"timestamp_field",b"timestamp_field",u"trino_options",b"trino_options",u"type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"options",b"options"]) -> typing_extensions___Literal["file_options","bigquery_options","kafka_options","kinesis_options","redshift_options","request_data_options","custom_options","snowflake_options","push_options","spark_options","trino_options","athena_options"]: ...
type___DataSource = DataSource
